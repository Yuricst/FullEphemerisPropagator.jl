var documenterSearchIndex = {"docs":
[{"location":"api/api_core.html#Core-routines","page":"Core","title":"Core routines","text":"","category":"section"},{"location":"api/api_core.html#Propagation-functions","page":"Core","title":"Propagation functions","text":"","category":"section"},{"location":"api/api_core.html","page":"Core","title":"Core","text":"Modules = [FullEphemerisPropagator]\nOrder   = [:function, :type]\nPages   = [\n  \"propagator.jl\",\n]","category":"page"},{"location":"api/api_core.html#Main.FullEphemerisPropagator.propagate-Tuple{Main.FullEphemerisPropagator.Propagator, Float64, Tuple{Real, Real}, Vector}","page":"Core","title":"Main.FullEphemerisPropagator.propagate","text":"Propagate initial state u0 from tspan[1] to tspan[2]. The initial state should be given as u0 = [x,y,z,vx,vy,vz].\n\nAdditional keyworded arguments for DifferentialEquations.solve() can be passed. See: https://docs.sciml.ai/DiffEqDocs/stable/basics/commonsolveropts/#CommonSolve.solve-Tuple%7BSciMLBase.AbstractDEProblem,%20Vararg%7BAny%7D%7D\n\nArguments\n\npropagator::Propagator: Propagator object\net0::Float64: Initial epoch in ephemeris time, in seconds\ntspan::Tuple{Real,Real}: Time span to propagate, in canonical time units\nu0::Vector: Initial state vector\ncallback::Union{Nothing,Function}: Optional callback function\nkwargs...: Additional keyworded arguments for DifferentialEquations.solve()\n\n\n\n\n\n","category":"method"},{"location":"api/api_core.html#Main.FullEphemerisPropagator.propagate-Tuple{Main.FullEphemerisPropagator.PropagatorSTM, Float64, Tuple{Real, Real}, Vector}","page":"Core","title":"Main.FullEphemerisPropagator.propagate","text":"Propagate initial state u0 and STM from tspan[1] to tspan[2]. The initial state should be given as u0 = [x,y,z,vx,vy,vz].\n\nAdditional keyworded arguments for DifferentialEquations.solve() can be passed. See: https://docs.sciml.ai/DiffEqDocs/stable/basics/commonsolveropts/#CommonSolve.solve-Tuple%7BSciMLBase.AbstractDEProblem,%20Vararg%7BAny%7D%7D    \n\nArguments\n\npropagator::Propagator: Propagator object\net0::Float64: Initial epoch in ephemeris time, in seconds\ntspan::Tuple{Real,Real}: Time span to propagate, in canonical time units\nu0::Vector: Initial state vector\ncallback::Union{Nothing,Function}: Optional callback function\nkwargs...: Additional keyworded arguments for DifferentialEquations.solve()\n\n\n\n\n\n","category":"method"},{"location":"api/api_core.html#Main.FullEphemerisPropagator.Propagator","page":"Core","title":"Main.FullEphemerisPropagator.Propagator","text":"Propagator struct holds ODEProblem along with solve parameters.\n\n\n\n\n\n","category":"type"},{"location":"api/api_core.html#Main.FullEphemerisPropagator.PropagatorSTM","page":"Core","title":"Main.FullEphemerisPropagator.PropagatorSTM","text":"Propagator struct holds ODEProblem along with solve parameters.\n\n\n\n\n\n","category":"type"},{"location":"api/api_core.html#Propagator-parameters,-canonical-scales,-and-equations-of-motion","page":"Core","title":"Propagator parameters, canonical scales, and equations of motion","text":"","category":"section"},{"location":"api/api_core.html","page":"Core","title":"Core","text":"Modules = [FullEphemerisPropagator]\nOrder   = [:function, :type]\nPages   = [\n  \"eoms/parameters.jl\",\n  \"eoms/eoms_Nbody.jl\",\n  \"eoms/eoms_NbodySRP.jl\",\n  \"eoms/perturbations.jl\",\n  \"canonical.jl\",\n]","category":"page"},{"location":"api/api_core.html#Main.FullEphemerisPropagator.eom_Nbody_SPICE!-NTuple{4, Any}","page":"Core","title":"Main.FullEphemerisPropagator.eom_Nbody_SPICE!","text":"N-body equations of motion, using SPICE query for third-body positions. This function signature is compatible with DifferentialEquations.jl.\n\n\n\n\n\n","category":"method"},{"location":"api/api_core.html#Main.FullEphemerisPropagator.eom_Nbody_STM_SPICE!-NTuple{4, Any}","page":"Core","title":"Main.FullEphemerisPropagator.eom_Nbody_STM_SPICE!","text":"N-body equations of motion, using SPICE query for third-body positions. This function signature is compatible with DifferentialEquations.jl. This function propagates the concatenated state and STM.\n\n\n\n\n\n","category":"method"},{"location":"api/api_core.html#Main.FullEphemerisPropagator.eom_NbodySRP_SPICE!-NTuple{4, Any}","page":"Core","title":"Main.FullEphemerisPropagator.eom_NbodySRP_SPICE!","text":"N-body equations of motion with SRP, using SPICE query for third-body positions. This function signature is compatible with DifferentialEquations.jl.\n\n\n\n\n\n","category":"method"},{"location":"api/api_core.html#Main.FullEphemerisPropagator.eom_NbodySRP_STM_SPICE!-NTuple{4, Any}","page":"Core","title":"Main.FullEphemerisPropagator.eom_NbodySRP_STM_SPICE!","text":"N-body equations of motion with SRP, using SPICE query for third-body positions. This function signature is compatible with DifferentialEquations.jl. This function propagates the concatenated state and STM.\n\n\n\n\n\n","category":"method"},{"location":"api/api_core.html#Main.FullEphemerisPropagator.third_body_accel-Tuple{Any, Any, Any}","page":"Core","title":"Main.FullEphemerisPropagator.third_body_accel","text":"Compute third-body acceleration via Battin's formula\n\n\n\n\n\n","category":"method"},{"location":"api/api_core.html#Differential-Correction","page":"Core","title":"Differential Correction","text":"","category":"section"},{"location":"api/api_core.html","page":"Core","title":"Core","text":"Modules = [FullEphemerisPropagator]\nOrder   = [:function, :type]\nPages   = [\n  \"differentialcorrection.jl\",\n]","category":"page"},{"location":"api/api_core.html#Main.FullEphemerisPropagator.shoot","page":"Core","title":"Main.FullEphemerisPropagator.shoot","text":"Solve multiple shooting problem. The assumed variables are the nodes only.\n\n\n\n\n\n","category":"function"},{"location":"api/api_core.html#Main.FullEphemerisPropagator.ForwardMultipleShootingProblem","page":"Core","title":"Main.FullEphemerisPropagator.ForwardMultipleShootingProblem","text":"Forward-only multiple shooting problem\n\n\n\n\n\n","category":"type"},{"location":"basics.html#Basics","page":"Basics","title":"Basics","text":"","category":"section"},{"location":"basics.html","page":"Basics","title":"Basics","text":"For the N-body problem, we can first do some setup:","category":"page"},{"location":"basics.html","page":"Basics","title":"Basics","text":"using SPICE\nusing OrdinaryDiffEq   # could be DifferentialEquations.jl\n\ninclude(\"../src/FullEphemerisPropagator.jl\")\n\n# furnish spice kernels\nspice_dir = ENV[\"SPICE\"]   # modify as necessary\nfurnsh(joinpath(spice_dir, \"lsk\", \"naif0012.tls\"))\nfurnsh(joinpath(spice_dir, \"spk\", \"de440.bsp\"))","category":"page"},{"location":"basics.html#Configuring-the-dynamics","page":"Basics","title":"Configuring the dynamics","text":"","category":"section"},{"location":"basics.html","page":"Basics","title":"Basics","text":"We first need to give the values of GMs, their corresponding NAIF IDs, the intertial frame name in which the integration is to be done, and a canonical length scale:","category":"page"},{"location":"basics.html","page":"Basics","title":"Basics","text":"# define parameters\nmus = [\n    4.9028000661637961E+03,\n    3.9860043543609598E+05,\n    1.3271244004193938E+11,\n]                                   # GMs\nnaif_ids = [\"301\", \"399\", \"10\"]     # NAIF IDs of bodies\nnaif_frame = \"J2000\"                # NAIF frame\nabcorr = \"NONE\"                     # aberration  correction\nlstar = 3000.0                      # canonical length scale","category":"page"},{"location":"basics.html","page":"Basics","title":"Basics","text":"If the integration is to be done in km and km/s, simply choose lstar = 1.0. ","category":"page"},{"location":"basics.html","page":"Basics","title":"Basics","text":"Now, we need to create a propagator object","category":"page"},{"location":"basics.html","page":"Basics","title":"Basics","text":"# instantiate propagator\nprop = FullEphemerisPropagator.Propagator(\n    Vern9(),\n    lstar,\n    mus,\n    naif_ids;\n    naif_frame = naif_frame,\n    reltol = 1e-12, \n    abstol = 1e-12,\n)","category":"page"},{"location":"basics.html#Configuring-solar-radiation-pressure-(SRP)","page":"Basics","title":"Configuring solar radiation pressure (SRP)","text":"","category":"section"},{"location":"basics.html","page":"Basics","title":"Basics","text":"Both FullEphemerisPropagator.Propagator and FullEphemerisPropagator.PropagatorSTM take as arguments use_srp::Bool. If set to true, then the SRP term is included. This is calculated based on three parameters, namely:","category":"page"},{"location":"basics.html","page":"Basics","title":"Basics","text":"srp_cr : reflection coefficient, non-dimensional\nsrp_Am : Area/mass, in m^2/kg\nsrp_P  : radiation pressure magnitude at 1 AU, in N/m^2","category":"page"},{"location":"basics.html","page":"Basics","title":"Basics","text":"Note that the units for these coefficients are always expected to be in those defined in the definition here, even though the integration happens in canonical scales. ","category":"page"},{"location":"basics.html","page":"Basics","title":"Basics","text":"By default, use_srp is set to false.  To modify, we can call","category":"page"},{"location":"basics.html","page":"Basics","title":"Basics","text":"# instantiate propagator with custom SRP\nsrp_cr = 1.0\nsrp_Am = 0.001\nsrp_P = 4.56e-6\nprop = FullEphemerisPropagator.Propagator(\n    Vern9(),\n    lstar,\n    mus,\n    naif_ids,\n    srp_cr,\n    srp_Am,\n    srp_P;\n    use_srp = true,\n    naif_frame = naif_frame,\n    reltol = 1e-12,\n    abstol = 1e-12,\n)","category":"page"},{"location":"basics.html#Propagating-the-state","page":"Basics","title":"Propagating the state","text":"","category":"section"},{"location":"basics.html#High-level-API","page":"Basics","title":"High-level API","text":"","category":"section"},{"location":"basics.html","page":"Basics","title":"Basics","text":"Now for integrating, there are two APIs available; the high-level API is as follows:","category":"page"},{"location":"basics.html","page":"Basics","title":"Basics","text":"# initial epoch\net0 = str2et(\"2020-01-01T00:00:00\")\n\n# initial state (in canonical scale)\nu0 = [\n    -2.5019204591096096,\n    14.709398066624694,\n    -18.59744250295792,\n    5.62688812721852e-2,\n    1.439926311669468e-2,\n    3.808273517470642e-3\n]\n\n# time span (1 day, in canonical scale)\ntspan = (0.0, 86400/prop.parameters.tstar)\n\n# solve\nsol = FullEphemerisPropagator.propagate(prop, et0, u0, tspan)","category":"page"},{"location":"basics.html#Low-level-API","page":"Basics","title":"Low-level API","text":"","category":"section"},{"location":"basics.html","page":"Basics","title":"Basics","text":"If it is desirable to use DifferentialEquations.jl's calls to ODEProblem() and solve() directly, we can do:","category":"page"},{"location":"basics.html","page":"Basics","title":"Basics","text":"# construct parameters\nparameters = FullEphemerisPropagator.Nbody_params(\n    et0,\n    lstar,\n    mus,\n    naif_ids;\n    naif_frame=naif_frame,\n    abcorr=abcorr\n)\n\n# initial epoch\net0 = str2et(\"2020-01-01T00:00:00\")\n\n# initial state (convert km, km/s to canonical scale)\nu0_dim = [2200.0, 0.0, 4200.0, 0.03, 1.1, 0.1]\nu0 = FullEphemerisPropagator.dim2nondim(prop, u0_dim)\n\n# time span (1 day, in canonical scale)\ntspan = (0.0, 30*86400/prop.parameters.tstar)\n\n# solve\ntevals = LinRange(tspan[1], tspan[2], 15000)   # optionally specify when to query states\nsol = FullEphemerisPropagator.propagate(prop, et0, tspan, u0; saveat=tevals)\n@show sol.u[end];","category":"page"},{"location":"basics.html","page":"Basics","title":"Basics","text":"Finally, plotting: ","category":"page"},{"location":"basics.html","page":"Basics","title":"Basics","text":"using GLMakie\nfig = Figure(resolution=(600,600), fontsize=22)\nax1 = Axis3(fig[1, 1], aspect=(1,1,1))\nlines!(ax1, sol[1,:], sol[2,:], sol[3,:])\nfig","category":"page"},{"location":"basics.html#Propagating-the-STM","page":"Basics","title":"Propagating the STM","text":"","category":"section"},{"location":"basics.html","page":"Basics","title":"Basics","text":"If the state-transition matrix is also to be propagated, initialize the propagator object via","category":"page"},{"location":"basics.html","page":"Basics","title":"Basics","text":"prop = FullEphemerisPropagator.PropagatorSTM(\n    Vern9(),\n    lstar,\n    mus,\n    naif_ids;\n    use_srp = true,\n    naif_frame = naif_frame,\n    reltol = 1e-12,\n    abstol = 1e-12,\n)","category":"page"},{"location":"index.html#FullEphemerisPropagator.jl","page":"Home","title":"FullEphemerisPropagator.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"FullEphemerisPropagator.jl is an astrodynamics library written in pure Julia for the propagation of the translational state of a spacecraft in high-fidelity dynamics models:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"ddotboldsymbolr\n=\n-dfracmur^3 boldsymbolr\n+ sum_i boldsymbola_mathrmbodyi\n+ boldsymbola_mathrmsrp","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The library is essentially a wrapper around DifferentialEquations.jl, leveraging its numerical integration ecosystem. Ephemerides of celestial bodies are queried using JPL's SPICE kernels, which are handled via SPICE.jl. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Current capabilities include:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"N-body equations of motion (restricted two-body + 3rd body perturbations)\nSolar radiation pressure\nPropagation of state-transition matrix (STM) together with the state","category":"page"}]
}
